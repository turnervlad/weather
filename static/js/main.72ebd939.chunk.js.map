{"version":3,"sources":["screens/main-screen/Card.js","screens/main-screen/NewCityAdd.js","screens/main-screen/main-screen.js","screens/details-screen/details.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["Card","city","cityGet","data","useSelector","state","citiesData","dispatch","useDispatch","className","toUpperCase","main","temp","feels_like","to","onClick","type","NewCityAdd","useState","newCity","setNewCity","onChange","event","target","value","placeholder","fetch","then","response","json","cod","alert","message","MainScreen","cities","isLoadingMain","localStorageCities","localStorage","getItem","useEffect","split","forEach","payload","map","index","Details","useParams","isLoadingDetails","console","log","weather","temp_max","temp_min","humidity","pressure","wind","speed","App","path","ADD_NEW_CITY","ADD_CITY_DATA","DELETE_CITY","SET_LOADING_MAIN_PAGE","SET_LOADING_DETAILS_PAGE","setToLocalStorage","setItem","initialState","store","createStore","action","includes","filter","x","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.72ebd939.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport {useSelector, useDispatch} from 'react-redux';\r\n\r\n\r\n\r\nfunction Card({city, cityGet}) {\r\n    const data = useSelector(state => state.citiesData[city]);\r\n    const dispatch = useDispatch();\r\n  \r\n    return data ? (\r\n      <div className=\"card\">\r\n        <div className=\"city\">{city.toUpperCase()}</div>\r\n        <div>Daily temperature:\r\n          <span className=\"temperature\">\r\n            {data.main.temp}\r\n          </span>\r\n        </div>\r\n        <div>Feels like:\r\n          <span className=\"feels__like\">\r\n          {data.main.feels_like}\r\n          </span>\r\n        </div>\r\n        <div className=\"buttons\">\r\n          <Link to={\"/\"+ city}>\r\n            Detailed\r\n          </Link>\r\n          <button onClick={() => cityGet(city)}>\r\n            Update\r\n          </button>\r\n          <button onClick={() => dispatch({type: \"DELETE_CITY\", city: city})}>\r\n            Delete\r\n          </button>\r\n          \r\n        </div>\r\n      </div>\r\n    ) : null\r\n}\r\n\r\nexport default Card;","import React, { useState } from 'react';\r\nimport {useDispatch} from 'react-redux';\r\n\r\n\r\nfunction NewCityAdd () {\r\n    const [newCity, setNewCity] = useState('');\r\n    const dispatch = useDispatch();\r\n    // const cities = useSelector(state => state.cities);\r\n  \r\n    function addNewCity (city) {\r\n      fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&lang=ru&appid=b1ef2fb4dfe2ab9c8640525cfc37cf19`)\r\n        .then(response => response.json())\r\n        .then(data => { \r\n          if (data.cod >= 200 && data.cod < 300) {\r\n            dispatch({type: 'ADD_NEW_CITY', city: city, data: data});\r\n            setNewCity('');\r\n          } else {\r\n            alert(data.message);\r\n          }\r\n        })\r\n    }\r\n  \r\n    return (\r\n      <div className=\"addnewcity_wrapper\">\r\n        <div className=\"title\">ADD NEW CITY</div>\r\n        <input onChange={(event) => setNewCity(event.target.value)} value={newCity} placeholder='type the city...'></input>\r\n        <button onClick={() => addNewCity(newCity)}>Submit</button>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default NewCityAdd;","import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport \"../../App.css\";\r\nimport Card from \"./Card\";\r\nimport NewCityAdd from \"./NewCityAdd\";\r\n\r\nfunction MainScreen() {\r\n  const cities = useSelector(state => state.cities);\r\n  const isLoadingMain = useSelector(state => state.isLoadingMain);\r\n  const dispatch = useDispatch();\r\n  const localStorageCities = localStorage.getItem(\"cities\");\r\n\r\n  function cityGet(city) {\r\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&lang=ru&appid=b1ef2fb4dfe2ab9c8640525cfc37cf19`)\r\n      .then(response => response.json())\r\n      .then(data => dispatch({ type: \"ADD_CITY_DATA\", city: city, data: data }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (localStorageCities) {\r\n        localStorageCities.split(\",\").forEach(city => cityGet(city));\r\n    }     \r\n    dispatch({ type: \"SET_LOADING_MAIN_PAGE\", payload: false });\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"main_container\">\r\n        <NewCityAdd />\r\n        <div className=\"card_container\">\r\n            {isLoadingMain ? <div className=\"main_loader\">Loading...</div> : null}\r\n            {localStorageCities ?\r\n                localStorageCities.split(\",\").map((city, index) => <Card city={city} cityGet={cityGet} key={index + city} /> ) \r\n                : null }          \r\n        </div>    \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MainScreen;\r\n","import React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nfunction Details() {\r\n  let { city } = useParams();\r\n  const data = useSelector(state => state.citiesData[city]);\r\n  const dispatch = useDispatch();\r\n  const isLoadingDetails = useSelector(state => state.isLoadingDetails);\r\n  // const cities = useSelector(state => state.cities);\r\n  // console.log(cities);\r\n  console.log(data);\r\n\r\n  function cityGet(city) {\r\n    // console.log('load', isLoadingDetails);\r\n    // dispatch({type: 'SET_LOADING_DETAILS_PAGE', payload: true});\r\n    fetch(\r\n      `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=b1ef2fb4dfe2ab9c8640525cfc37cf19`\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) =>\r\n        dispatch({ type: \"ADD_NEW_CITY\", city: city, data: data })\r\n      );    \r\n    // dispatch({type: 'SET_LOADING_DETAILS_PAGE', payload: false});\r\n  }\r\n\r\n  useEffect(() => {\r\n    console.log(city);\r\n    if (!data) {\r\n      // cityGet(city);\r\n    }\r\n    dispatch({type: 'SET_LOADING_DETAILS_PAGE', payload: false});\r\n  }, []);\r\n\r\n  return data ? (     \r\n      <div className=\"details\">\r\n        {isLoadingDetails ? <div className=\"detail_loader\">Loading</div> : null}\r\n        <div>{city.toUpperCase()}</div>\r\n        <div>{data.weather[0].main}</div>\r\n        <div>Temperature now<span>{data.main.temp}</span></div>\r\n        <div>Feels like<span>{data.main.feels_like}</span></div>\r\n        <div>Max daily temperature<span>{data.main.temp_max}</span></div>\r\n        <div>Min daily temperature<span>{data.main.temp_min}</span></div>\r\n        <div>Humidity<span>{data.main.humidity}</span></div>\r\n        <div>Pressure<span>{data.main.pressure}</span></div>\r\n        <div>Wind speed<span>{data.wind.speed}</span></div>      \r\n      </div>\r\n  ) : null;\r\n}\r\n\r\nexport default Details;\r\n","import React from 'react';\nimport './App.css';\nimport MainScreen from \"./screens/main-screen/main-screen\";\nimport Details from './screens/details-screen/details';\nimport {\n  BrowserRouter as Router, Route, Switch\n} from \"react-router-dom\";\n\n\nfunction App() {\n  return (\n    <Router>\n        <Switch>\n          <Route path=\"/:city\">\n            <Details />\n          </Route>       \n          <Route path=\"/\">\n            <MainScreen /> \n          </Route> \n        </Switch>   \n    </Router>\n  )\n}\n\nexport default App;\n","import { createStore } from \"redux\";\n\nconst ADD_NEW_CITY = 'ADD_NEW_CITY';\nconst ADD_CITY_DATA = 'ADD_CITY_DATA';\nconst DELETE_CITY = \"DELETE_CITY\";\nconst SET_LOADING_MAIN_PAGE = 'SET_LOADING_MAIN_PAGE';\nconst SET_LOADING_DETAILS_PAGE = 'SET_LOADING_DETAILS_PAGE';\n\nfunction setToLocalStorage(newCity) {\n  if (localStorage.getItem('cities')) {\n    localStorage.setItem('cities', localStorage.getItem('cities') + ',' + newCity);\n  } else {\n    localStorage.setItem('cities', newCity);\n  }  \n}\n\nconst initialState = {\n  cities: ['london', 'kharkiv'],\n  citiesData: {},\n  isLoadingMain: true,\n  isLoadingDetails: true\n};\n\nexport const store = createStore(reducer, initialState);\n\nfunction reducer(state = initialState, action) {  \n  switch (action.type) {\n    case ADD_CITY_DATA:\n      return {\n        ...state,\n        citiesData: {\n          ...state.citiesData,\n          [action.city]: action.data      \n        }\n      }\n    case ADD_NEW_CITY:\n      // console.log(action);      \n      if (localStorage.getItem('cities')) {\n        if (!localStorage.getItem('cities').split(',').includes(action.city)) {\n          setToLocalStorage(action.city);\n        }        \n      } else {\n        setToLocalStorage(action.city);\n      }\n      return {\n        ...state,\n        cities: [...state.cities, action.city],\n        citiesData: {\n          ...state.citiesData,\n          [action.city]: action.data\n        }          \n      }\n    case DELETE_CITY:\n      delete state.citiesData[action.city];\n      localStorage.setItem('cities', localStorage.getItem('cities').split(',').filter(x => x !== action.city));\n      return {\n        ...state,\n        cities: state.cities.filter(x => x !== action.city)\n      }\n    case SET_LOADING_MAIN_PAGE:\n      return {\n        ...state,\n        isLoadingMain: action.payload\n      }\n    case SET_LOADING_DETAILS_PAGE:\n      return {\n        ...state,\n        isLoadingDetails: action.payload\n      } \n    default:\n      return state\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}